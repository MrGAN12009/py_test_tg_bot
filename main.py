import os
import asyncio
import logging
from typing import Optional
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
LOG_FILE = os.getenv("LOG_FILE", "bot.log")
MANAGER_URL = os.getenv("MANAGER_URL")  # e.g. http://localhost:5000
BOT_ID = os.getenv("BOT_ID")  # numeric id assigned by manager

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ (DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞)
    format="%(asctime)s - [%(levelname)s] - %(name)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

async def post_message_to_manager(user_id: Optional[int], chat_id: Optional[int], text: str, msg_type: str = "text") -> None:
    if not MANAGER_URL or not BOT_ID:
        return
    url = f"{MANAGER_URL.rstrip('/')}/api/bots/{BOT_ID}/messages"
    headers = {"X-Bot-Token": TOKEN} if TOKEN else {}
    payload = {
        "user_id": user_id,
        "chat_id": chat_id,
        "text": text,
        "type": msg_type,
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers, timeout=10) as resp:
                if resp.status >= 400:
                    logger.warning("Manager ingest failed: %s %s", resp.status, await resp.text())
    except Exception as e:
        logger.debug("Failed to send message to manager: %s", e)

# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º ü§ñ123")
    await post_message_to_manager(message.from_user.id if message.from_user else None, message.chat.id if message.chat else None, "/start", "command")

# –≠—Ö–æ-–±–æ—Ç: –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def echo_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")
    await post_message_to_manager(message.from_user.id if message.from_user else None, message.chat.id if message.chat else None, message.text or "", "text")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è üöÄ")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå")

if __name__ == "__main__":
    asyncio.run(main())
